/*
 * Italian Invoice API
 *
 *  ## Overview  The Invoice API is a RESTful API that allows you to send and receive invoices through the Italian Servizio di Interscambio (Interchange Service).  ### Authentication  The Invoicetronic API uses API keys to authenticate requests. If you don't have any API Key, you can request one by registering with the [Invoicetronic Developer Portal][1].  Test mode secret keys have the prefix `ik_test_` and live mode secret keys have the prefix `ik_live_`. Make sure to use the correct key for each environment.  > Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly > accessible areas such as GitHub, client-side code, and so forth.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  #### Basic Authentication  Basic Authentication is how you authenticate with the API. Use your API Key as the username and leave the password empty. If your client does not allow empty passwords, you can use any value as the password. Here's an example of how to authenticate with Basic Authentication and curl:  ```curl curl https://api.invoicetronic.com/invoice/v1/send \\     -u ik_test_1234567890abcdefg:  # The colon prevents curl from asking for a password. ```  [1]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: v1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DatiTrasmissione
    /// </summary>
    [DataContract(Name = "DatiTrasmissione")]
    public partial class DatiTrasmissione : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiTrasmissione" /> class.
        /// </summary>
        /// <param name="idTrasmittente">idTrasmittente.</param>
        /// <param name="progressivoInvio">progressivoInvio.</param>
        /// <param name="formatoTrasmissione">formatoTrasmissione.</param>
        /// <param name="codiceDestinatario">codiceDestinatario.</param>
        /// <param name="contattiTrasmittente">contattiTrasmittente.</param>
        /// <param name="pecDestinatario">pecDestinatario.</param>
        public DatiTrasmissione(IdTrasmittente idTrasmittente = default(IdTrasmittente), string progressivoInvio = default(string), string formatoTrasmissione = default(string), string codiceDestinatario = default(string), ContattiTrasmittente contattiTrasmittente = default(ContattiTrasmittente), string pecDestinatario = default(string))
        {
            this.IdTrasmittente = idTrasmittente;
            this.ProgressivoInvio = progressivoInvio;
            this.FormatoTrasmissione = formatoTrasmissione;
            this.CodiceDestinatario = codiceDestinatario;
            this.ContattiTrasmittente = contattiTrasmittente;
            this.PecDestinatario = pecDestinatario;
        }

        /// <summary>
        /// Gets or Sets IdTrasmittente
        /// </summary>
        [DataMember(Name = "id_trasmittente", EmitDefaultValue = false)]
        public IdTrasmittente IdTrasmittente { get; set; }

        /// <summary>
        /// Gets or Sets ProgressivoInvio
        /// </summary>
        [DataMember(Name = "progressivo_invio", EmitDefaultValue = true)]
        public string ProgressivoInvio { get; set; }

        /// <summary>
        /// Gets or Sets FormatoTrasmissione
        /// </summary>
        [DataMember(Name = "formato_trasmissione", EmitDefaultValue = true)]
        public string FormatoTrasmissione { get; set; }

        /// <summary>
        /// Gets or Sets CodiceDestinatario
        /// </summary>
        [DataMember(Name = "codice_destinatario", EmitDefaultValue = true)]
        public string CodiceDestinatario { get; set; }

        /// <summary>
        /// Gets or Sets ContattiTrasmittente
        /// </summary>
        [DataMember(Name = "contatti_trasmittente", EmitDefaultValue = false)]
        public ContattiTrasmittente ContattiTrasmittente { get; set; }

        /// <summary>
        /// Gets or Sets PecDestinatario
        /// </summary>
        [DataMember(Name = "pec_destinatario", EmitDefaultValue = true)]
        public string PecDestinatario { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiTrasmissione {\n");
            sb.Append("  IdTrasmittente: ").Append(IdTrasmittente).Append("\n");
            sb.Append("  ProgressivoInvio: ").Append(ProgressivoInvio).Append("\n");
            sb.Append("  FormatoTrasmissione: ").Append(FormatoTrasmissione).Append("\n");
            sb.Append("  CodiceDestinatario: ").Append(CodiceDestinatario).Append("\n");
            sb.Append("  ContattiTrasmittente: ").Append(ContattiTrasmittente).Append("\n");
            sb.Append("  PecDestinatario: ").Append(PecDestinatario).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
