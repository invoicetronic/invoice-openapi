/*
 * Italian Invoice API
 *
 *  ## Overview  The Invoice API is a RESTful API that allows you to send and receive invoices through the Italian Servizio di Interscambio (Interchange Service).  ### Authentication  The Invoicetronic API uses API keys to authenticate requests. If you don't have any API Key, you can request one by registering with the [Invoicetronic Developer Portal][1].  Test mode secret keys have the prefix `ik_test_` and live mode secret keys have the prefix `ik_live_`. Make sure to use the correct key for each environment.  > Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly > accessible areas such as GitHub, client-side code, and so forth.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  #### Basic Authentication  Basic Authentication is how you authenticate with the API. Use your API Key as the username and leave the password empty. If your client does not allow empty passwords, you can use any value as the password. Here's an example of how to authenticate with Basic Authentication and curl:  ```curl curl https://api.invoicetronic.com/invoice/v1/send \\     -u ik_test_1234567890abcdefg:  # The colon prevents curl from asking for a password. ```  [1]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: v1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.InvoiceApi.Client.OpenAPIDateConverter;

namespace Invoicetronic.InvoiceApi.Model
{
    /// <summary>
    /// Receive
    /// </summary>
    [DataContract(Name = "Receive")]
    public partial class Receive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Receive" /> class.
        /// </summary>
        /// <param name="id">Unique identifier. Leave it at 0 for new records as it will be set automatically..</param>
        /// <param name="created">Creation date. It is set automatically..</param>
        /// <param name="varVersion">Row version, for optimistic concurrency. It is set automatically..</param>
        /// <param name="userId">User id..</param>
        /// <param name="companyId">Company id. On send, this is the sender and must be set in advance. On receive, it will be  automatically set based on the recipient&#39;s VAT number. If a matching company is not found, the invoice will be rejected until the company is created..</param>
        /// <param name="committente">VAT number of the Cessionario/Committente (customer). This is automatically set based on the recipient&#39;s VAT number..</param>
        /// <param name="prestatore">VAT number of the Cedente/Prestatore (vendor). This is automatically set based on the sender&#39;s VAT number..</param>
        /// <param name="identifier">SDI identifier. This is set by the SDI and is guaranted to be unique within the SDI system..</param>
        /// <param name="fileName">Xml file name..</param>
        /// <param name="format">SDI format (FPA12, FPR12, FSM10, ...).</param>
        /// <param name="payload">Xml payloaad. This is the actual xml content, as string. On send, it can be base64 encoded. If it&#39;s not, it will be encoded before sending. It is guaranteed to be cyphered at rest..</param>
        /// <param name="lastUpdate">Last update from SDI..</param>
        /// <param name="dateSent">When the invoice was sent to SDI..</param>
        /// <param name="documents">The invoices included in the payload. This is set by the system, based on the xml content..</param>
        /// <param name="isRead">Wether the invoice has been read at least once..</param>
        public Receive(int id = default(int), DateTime created = default(DateTime), int varVersion = default(int), int userId = default(int), int companyId = default(int), string committente = default(string), string prestatore = default(string), string identifier = default(string), string fileName = default(string), string format = default(string), string payload = default(string), DateTime? lastUpdate = default(DateTime?), DateTime? dateSent = default(DateTime?), List<DocumentData> documents = default(List<DocumentData>), bool isRead = default(bool))
        {
            this.Id = id;
            this.Created = created;
            this.VarVersion = varVersion;
            this.UserId = userId;
            this.CompanyId = companyId;
            this.Committente = committente;
            this.Prestatore = prestatore;
            this.Identifier = identifier;
            this.FileName = fileName;
            this.Format = format;
            this.Payload = payload;
            this.LastUpdate = lastUpdate;
            this.DateSent = dateSent;
            this.Documents = documents;
            this.IsRead = isRead;
        }

        /// <summary>
        /// Unique identifier. Leave it at 0 for new records as it will be set automatically.
        /// </summary>
        /// <value>Unique identifier. Leave it at 0 for new records as it will be set automatically.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Creation date. It is set automatically.
        /// </summary>
        /// <value>Creation date. It is set automatically.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Row version, for optimistic concurrency. It is set automatically.
        /// </summary>
        /// <value>Row version, for optimistic concurrency. It is set automatically.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// User id.
        /// </summary>
        /// <value>User id.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Company id. On send, this is the sender and must be set in advance. On receive, it will be  automatically set based on the recipient&#39;s VAT number. If a matching company is not found, the invoice will be rejected until the company is created.
        /// </summary>
        /// <value>Company id. On send, this is the sender and must be set in advance. On receive, it will be  automatically set based on the recipient&#39;s VAT number. If a matching company is not found, the invoice will be rejected until the company is created.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// VAT number of the Cessionario/Committente (customer). This is automatically set based on the recipient&#39;s VAT number.
        /// </summary>
        /// <value>VAT number of the Cessionario/Committente (customer). This is automatically set based on the recipient&#39;s VAT number.</value>
        [DataMember(Name = "committente", EmitDefaultValue = true)]
        public string Committente { get; set; }

        /// <summary>
        /// VAT number of the Cedente/Prestatore (vendor). This is automatically set based on the sender&#39;s VAT number.
        /// </summary>
        /// <value>VAT number of the Cedente/Prestatore (vendor). This is automatically set based on the sender&#39;s VAT number.</value>
        [DataMember(Name = "prestatore", EmitDefaultValue = true)]
        public string Prestatore { get; set; }

        /// <summary>
        /// SDI identifier. This is set by the SDI and is guaranted to be unique within the SDI system.
        /// </summary>
        /// <value>SDI identifier. This is set by the SDI and is guaranted to be unique within the SDI system.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Xml file name.
        /// </summary>
        /// <value>Xml file name.</value>
        [DataMember(Name = "file_name", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// SDI format (FPA12, FPR12, FSM10, ...)
        /// </summary>
        /// <value>SDI format (FPA12, FPR12, FSM10, ...)</value>
        [DataMember(Name = "format", EmitDefaultValue = true)]
        public string Format { get; set; }

        /// <summary>
        /// Xml payloaad. This is the actual xml content, as string. On send, it can be base64 encoded. If it&#39;s not, it will be encoded before sending. It is guaranteed to be cyphered at rest.
        /// </summary>
        /// <value>Xml payloaad. This is the actual xml content, as string. On send, it can be base64 encoded. If it&#39;s not, it will be encoded before sending. It is guaranteed to be cyphered at rest.</value>
        [DataMember(Name = "payload", EmitDefaultValue = true)]
        public string Payload { get; set; }

        /// <summary>
        /// Last update from SDI.
        /// </summary>
        /// <value>Last update from SDI.</value>
        [DataMember(Name = "last_update", EmitDefaultValue = true)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// When the invoice was sent to SDI.
        /// </summary>
        /// <value>When the invoice was sent to SDI.</value>
        [DataMember(Name = "date_sent", EmitDefaultValue = true)]
        public DateTime? DateSent { get; set; }

        /// <summary>
        /// The invoices included in the payload. This is set by the system, based on the xml content.
        /// </summary>
        /// <value>The invoices included in the payload. This is set by the system, based on the xml content.</value>
        [DataMember(Name = "documents", EmitDefaultValue = true)]
        public List<DocumentData> Documents { get; set; }

        /// <summary>
        /// Wether the invoice has been read at least once.
        /// </summary>
        /// <value>Wether the invoice has been read at least once.</value>
        [DataMember(Name = "is_read", EmitDefaultValue = true)]
        public bool IsRead { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receive {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Committente: ").Append(Committente).Append("\n");
            sb.Append("  Prestatore: ").Append(Prestatore).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  DateSent: ").Append(DateSent).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
