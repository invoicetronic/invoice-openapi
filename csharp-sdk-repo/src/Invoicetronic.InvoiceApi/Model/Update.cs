/*
 * Italian Invoice API
 *
 *  ## Overview  The Invoice API is a RESTful API that allows you to send and receive invoices through the Italian Servizio di Interscambio (Interchange Service).  ### Authentication  The Invoicetronic API uses API keys to authenticate requests. If you don't have any API Key, you can request one by registering with the [Invoicetronic Developer Portal][1].  Test mode secret keys have the prefix `ik_test_` and live mode secret keys have the prefix `ik_live_`. Make sure to use the correct key for each environment.  > Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly > accessible areas such as GitHub, client-side code, and so forth.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  #### Basic Authentication  Basic Authentication is how you authenticate with the API. Use your API Key as the username and leave the password empty. If your client does not allow empty passwords, you can use any value as the password. Here's an example of how to authenticate with Basic Authentication and curl:  ```curl curl https://api.invoicetronic.com/invoice/v1/send \\     -u ik_test_1234567890abcdefg:  # The colon prevents curl from asking for a password. ```  [1]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: v1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.InvoiceApi.Client.OpenAPIDateConverter;

namespace Invoicetronic.InvoiceApi.Model
{
    /// <summary>
    /// Update
    /// </summary>
    [DataContract(Name = "Update")]
    public partial class Update : IValidatableObject
    {
        /// <summary>
        /// State of the document. Theses are the possible values, as per the SDI documentation:
        /// </summary>
        /// <value>State of the document. Theses are the possible values, as per the SDI documentation:</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Inviato for value: Inviato
            /// </summary>
            [EnumMember(Value = "Inviato")]
            Inviato = 1,

            /// <summary>
            /// Enum Consegnato for value: Consegnato
            /// </summary>
            [EnumMember(Value = "Consegnato")]
            Consegnato = 2,

            /// <summary>
            /// Enum NonConsegnato for value: NonConsegnato
            /// </summary>
            [EnumMember(Value = "NonConsegnato")]
            NonConsegnato = 3,

            /// <summary>
            /// Enum Scartato for value: Scartato
            /// </summary>
            [EnumMember(Value = "Scartato")]
            Scartato = 4,

            /// <summary>
            /// Enum AccettatoDalDestinatario for value: AccettatoDalDestinatario
            /// </summary>
            [EnumMember(Value = "AccettatoDalDestinatario")]
            AccettatoDalDestinatario = 5,

            /// <summary>
            /// Enum RifiutatoDalDestinatario for value: RifiutatoDalDestinatario
            /// </summary>
            [EnumMember(Value = "RifiutatoDalDestinatario")]
            RifiutatoDalDestinatario = 6,

            /// <summary>
            /// Enum ImpossibilitDiRecapito for value: ImpossibilitàDiRecapito
            /// </summary>
            [EnumMember(Value = "ImpossibilitàDiRecapito")]
            ImpossibilitDiRecapito = 7,

            /// <summary>
            /// Enum DecorrenzaTermini for value: DecorrenzaTermini
            /// </summary>
            [EnumMember(Value = "DecorrenzaTermini")]
            DecorrenzaTermini = 8,

            /// <summary>
            /// Enum AttestazioneTrasmissioneFattura for value: AttestazioneTrasmissioneFattura
            /// </summary>
            [EnumMember(Value = "AttestazioneTrasmissioneFattura")]
            AttestazioneTrasmissioneFattura = 9
        }


        /// <summary>
        /// State of the document. Theses are the possible values, as per the SDI documentation:
        /// </summary>
        /// <value>State of the document. Theses are the possible values, as per the SDI documentation:</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Update" /> class.
        /// </summary>
        /// <param name="id">Unique identifier. Leave it at 0 for new records as it will be set automatically..</param>
        /// <param name="created">Creation date. It is set automatically..</param>
        /// <param name="varVersion">Row version, for optimistic concurrency. It is set automatically..</param>
        /// <param name="userId">User id..</param>
        /// <param name="companyId">Company id..</param>
        /// <param name="sendId">Send id. This is the id of the sent invoice to which this update refers to..</param>
        /// <param name="dateSent">When the document was sent to the SDI..</param>
        /// <param name="lastUpdate">Last update from SDI..</param>
        /// <param name="identifier">SDI identifier. This is set by the SDI and it is unique within the SDI system..</param>
        /// <param name="state">State of the document. Theses are the possible values, as per the SDI documentation:.</param>
        /// <param name="description">Description for the state..</param>
        /// <param name="messageId">SDI message id..</param>
        /// <param name="errors">SDI errors, if any..</param>
        /// <param name="isRead">Wether the item has been read at least once..</param>
        public Update(int id = default(int), DateTime created = default(DateTime), int varVersion = default(int), int userId = default(int), int companyId = default(int), int sendId = default(int), DateTime? dateSent = default(DateTime?), DateTime lastUpdate = default(DateTime), string identifier = default(string), StateEnum? state = default(StateEnum?), string description = default(string), string messageId = default(string), List<Error> errors = default(List<Error>), bool isRead = default(bool))
        {
            this.Id = id;
            this.Created = created;
            this.VarVersion = varVersion;
            this.UserId = userId;
            this.CompanyId = companyId;
            this.SendId = sendId;
            this.DateSent = dateSent;
            this.LastUpdate = lastUpdate;
            this.Identifier = identifier;
            this.State = state;
            this.Description = description;
            this.MessageId = messageId;
            this.Errors = errors;
            this.IsRead = isRead;
        }

        /// <summary>
        /// Unique identifier. Leave it at 0 for new records as it will be set automatically.
        /// </summary>
        /// <value>Unique identifier. Leave it at 0 for new records as it will be set automatically.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Creation date. It is set automatically.
        /// </summary>
        /// <value>Creation date. It is set automatically.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Row version, for optimistic concurrency. It is set automatically.
        /// </summary>
        /// <value>Row version, for optimistic concurrency. It is set automatically.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// User id.
        /// </summary>
        /// <value>User id.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Company id.
        /// </summary>
        /// <value>Company id.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// Send id. This is the id of the sent invoice to which this update refers to.
        /// </summary>
        /// <value>Send id. This is the id of the sent invoice to which this update refers to.</value>
        [DataMember(Name = "send_id", EmitDefaultValue = false)]
        public int SendId { get; set; }

        /// <summary>
        /// When the document was sent to the SDI.
        /// </summary>
        /// <value>When the document was sent to the SDI.</value>
        [DataMember(Name = "date_sent", EmitDefaultValue = true)]
        public DateTime? DateSent { get; set; }

        /// <summary>
        /// Last update from SDI.
        /// </summary>
        /// <value>Last update from SDI.</value>
        [DataMember(Name = "last_update", EmitDefaultValue = false)]
        public DateTime LastUpdate { get; set; }

        /// <summary>
        /// SDI identifier. This is set by the SDI and it is unique within the SDI system.
        /// </summary>
        /// <value>SDI identifier. This is set by the SDI and it is unique within the SDI system.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Description for the state.
        /// </summary>
        /// <value>Description for the state.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// SDI message id.
        /// </summary>
        /// <value>SDI message id.</value>
        [DataMember(Name = "message_id", EmitDefaultValue = true)]
        public string MessageId { get; set; }

        /// <summary>
        /// SDI errors, if any.
        /// </summary>
        /// <value>SDI errors, if any.</value>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Wether the item has been read at least once.
        /// </summary>
        /// <value>Wether the item has been read at least once.</value>
        [DataMember(Name = "is_read", EmitDefaultValue = true)]
        public bool IsRead { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Update {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  SendId: ").Append(SendId).Append("\n");
            sb.Append("  DateSent: ").Append(DateSent).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
