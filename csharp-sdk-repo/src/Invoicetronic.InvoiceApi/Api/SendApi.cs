/*
 * Italian Invoice API
 *
 *  ## Overview  The Invoice API is a RESTful API that allows you to send and receive invoices through the Italian Servizio di Interscambio (Interchange Service).  ### Authentication  The Invoicetronic API uses API keys to authenticate requests. If you don't have any API Key, you can request one by registering with the [Invoicetronic Developer Portal][1].  Test mode secret keys have the prefix `ik_test_` and live mode secret keys have the prefix `ik_live_`. Make sure to use the correct key for each environment.  > Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly > accessible areas such as GitHub, client-side code, and so forth.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  #### Basic Authentication  Basic Authentication is how you authenticate with the API. Use your API Key as the username and leave the password empty. If your client does not allow empty passwords, you can use any value as the password. Here's an example of how to authenticate with Basic Authentication and curl:  ```curl curl https://api.invoicetronic.com/invoice/v1/send \\     -u ik_test_1234567890abcdefg:  # The colon prevents curl from asking for a password. ```  [1]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: v1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Invoicetronic.InvoiceApi.Client;
using Invoicetronic.InvoiceApi.Model;

namespace Invoicetronic.InvoiceApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a send invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        Send InvoiceV1SendFilesPost(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a send invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> InvoiceV1SendFilesPostWithHttpInfo(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List send invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Send&gt;</returns>
        List<Send> InvoiceV1SendGet(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List send invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Send&gt;</returns>
        ApiResponse<List<Send>> InvoiceV1SendGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a send invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        Send InvoiceV1SendIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get a send invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> InvoiceV1SendIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Add a send invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        Send InvoiceV1SendJsonPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a send invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> InvoiceV1SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add a send invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        Send InvoiceV1SendPost(Send send, bool? validate = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a send invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> InvoiceV1SendPostWithHttpInfo(Send send, bool? validate = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add a send invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        Send InvoiceV1SendXmlPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a send invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> InvoiceV1SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a send invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> InvoiceV1SendFilesPostAsync(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a send invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> InvoiceV1SendFilesPostWithHttpInfoAsync(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List send invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Send&gt;</returns>
        System.Threading.Tasks.Task<List<Send>> InvoiceV1SendGetAsync(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List send invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Send&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Send>>> InvoiceV1SendGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a send invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> InvoiceV1SendIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a send invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> InvoiceV1SendIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add a send invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> InvoiceV1SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a send invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> InvoiceV1SendJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add a send invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> InvoiceV1SendPostAsync(Send send, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a send invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> InvoiceV1SendPostWithHttpInfoAsync(Send send, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add a send invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> InvoiceV1SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a send invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> InvoiceV1SendXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApi : ISendApiSync, ISendApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SendApi : ISendApi
    {
        private Invoicetronic.InvoiceApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendApi(string basePath)
        {
            this.Configuration = Invoicetronic.InvoiceApi.Client.Configuration.MergeConfigurations(
                Invoicetronic.InvoiceApi.Client.GlobalConfiguration.Instance,
                new Invoicetronic.InvoiceApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SendApi(Invoicetronic.InvoiceApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.InvoiceApi.Client.Configuration.MergeConfigurations(
                Invoicetronic.InvoiceApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SendApi(Invoicetronic.InvoiceApi.Client.ISynchronousClient client, Invoicetronic.InvoiceApi.Client.IAsynchronousClient asyncClient, Invoicetronic.InvoiceApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.InvoiceApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a send invoice by file Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        public Send InvoiceV1SendFilesPost(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = InvoiceV1SendFilesPostWithHttpInfo(files, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by file Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Send> InvoiceV1SendFilesPostWithHttpInfo(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'files' is set
            if (files == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'files' when calling SendApi->InvoiceV1SendFilesPost");
            }

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            foreach (var file in files)
            {
                localVarRequestOptions.FileParameters.Add("files", file);
            }

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/invoice/v1/send/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice by file Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> InvoiceV1SendFilesPostAsync(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = await InvoiceV1SendFilesPostWithHttpInfoAsync(files, validate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by file Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Send>> InvoiceV1SendFilesPostWithHttpInfoAsync(List<System.IO.Stream> files, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'files' is set
            if (files == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'files' when calling SendApi->InvoiceV1SendFilesPost");
            }


            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            foreach (var file in files)
            {
                localVarRequestOptions.FileParameters.Add("files", file);
            }

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/invoice/v1/send/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List send invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Send&gt;</returns>
        public List<Send> InvoiceV1SendGet(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<List<Send>> localVarResponse = InvoiceV1SendGetWithHttpInfo(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List send invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Send&gt;</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<List<Send>> InvoiceV1SendGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Send>>("/invoice/v1/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List send invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Send&gt;</returns>
        public async System.Threading.Tasks.Task<List<Send>> InvoiceV1SendGetAsync(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<List<Send>> localVarResponse = await InvoiceV1SendGetWithHttpInfoAsync(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List send invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Send&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<List<Send>>> InvoiceV1SendGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Send>>("/invoice/v1/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a send invoice by id Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        public Send InvoiceV1SendIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = InvoiceV1SendIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a send invoice by id Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Send> InvoiceV1SendIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Send>("/invoice/v1/send/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a send invoice by id Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> InvoiceV1SendIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = await InvoiceV1SendIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a send invoice by id Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Send>> InvoiceV1SendIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Send>("/invoice/v1/send/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice by json Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        public Send InvoiceV1SendJsonPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = InvoiceV1SendJsonPostWithHttpInfo(fatturaOrdinaria, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by json Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Send> InvoiceV1SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->InvoiceV1SendJsonPost");
            }

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendJsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/invoice/v1/send/json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendJsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice by json Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> InvoiceV1SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = await InvoiceV1SendJsonPostWithHttpInfoAsync(fatturaOrdinaria, validate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by json Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Send>> InvoiceV1SendJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->InvoiceV1SendJsonPost");
            }


            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendJsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/invoice/v1/send/json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendJsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        public Send InvoiceV1SendPost(Send send, bool? validate = default(bool?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = InvoiceV1SendPostWithHttpInfo(send, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Send> InvoiceV1SendPostWithHttpInfo(Send send, bool? validate = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'send' is set
            if (send == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->InvoiceV1SendPost");
            }

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = send;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/invoice/v1/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> InvoiceV1SendPostAsync(Send send, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = await InvoiceV1SendPostWithHttpInfoAsync(send, validate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Send>> InvoiceV1SendPostWithHttpInfoAsync(Send send, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'send' is set
            if (send == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->InvoiceV1SendPost");
            }


            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = send;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/invoice/v1/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice by xml Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Send</returns>
        public Send InvoiceV1SendXmlPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = InvoiceV1SendXmlPostWithHttpInfo(fatturaOrdinaria, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by xml Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Send> InvoiceV1SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->InvoiceV1SendXmlPost");
            }

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendXmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/invoice/v1/send/xml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendXmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a send invoice by xml Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> InvoiceV1SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Send> localVarResponse = await InvoiceV1SendXmlPostWithHttpInfoAsync(fatturaOrdinaria, validate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a send invoice by xml Send invoices are the invoices that are sent to the SDI.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Send>> InvoiceV1SendXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
            {
                throw new Invoicetronic.InvoiceApi.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->InvoiceV1SendXmlPost");
            }


            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            localVarRequestOptions.Operation = "SendApi.InvoiceV1SendXmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/invoice/v1/send/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1SendXmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
