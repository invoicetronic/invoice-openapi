/*
 * Italian Invoice API
 *
 *  ## Overview  The Invoice API is a RESTful API that allows you to send and receive invoices through the Italian Servizio di Interscambio (Interchange Service).  ### Authentication  The Invoicetronic API uses API keys to authenticate requests. If you don't have any API Key, you can request one by registering with the [Invoicetronic Developer Portal][1].  Test mode secret keys have the prefix `ik_test_` and live mode secret keys have the prefix `ik_live_`. Make sure to use the correct key for each environment.  > Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly > accessible areas such as GitHub, client-side code, and so forth.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  #### Basic Authentication  Basic Authentication is how you authenticate with the API. Use your API Key as the username and leave the password empty. If your client does not allow empty passwords, you can use any value as the password. Here's an example of how to authenticate with Basic Authentication and curl:  ```curl curl https://api.invoicetronic.com/invoice/v1/send \\     -u ik_test_1234567890abcdefg:  # The colon prevents curl from asking for a password. ```  [1]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: v1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Invoicetronic.InvoiceApi.Client;
using Invoicetronic.InvoiceApi.Model;

namespace Invoicetronic.InvoiceApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Receive&gt;</returns>
        List<Receive> InvoiceV1ReceiveGet(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Receive&gt;</returns>
        ApiResponse<List<Receive>> InvoiceV1ReceiveGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receive</returns>
        Receive InvoiceV1ReceiveIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receive</returns>
        ApiResponse<Receive> InvoiceV1ReceiveIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receive</returns>
        Receive InvoiceV1ReceiveIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receive</returns>
        ApiResponse<Receive> InvoiceV1ReceiveIdGetWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Receive&gt;</returns>
        System.Threading.Tasks.Task<List<Receive>> InvoiceV1ReceiveGetAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Receive&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Receive>>> InvoiceV1ReceiveGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        System.Threading.Tasks.Task<Receive> InvoiceV1ReceiveIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receive>> InvoiceV1ReceiveIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        System.Threading.Tasks.Task<Receive> InvoiceV1ReceiveIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies.
        /// </remarks>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receive>> InvoiceV1ReceiveIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApi : IReceiveApiSync, IReceiveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceiveApi : IReceiveApi
    {
        private Invoicetronic.InvoiceApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiveApi(string basePath)
        {
            this.Configuration = Invoicetronic.InvoiceApi.Client.Configuration.MergeConfigurations(
                Invoicetronic.InvoiceApi.Client.GlobalConfiguration.Instance,
                new Invoicetronic.InvoiceApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceiveApi(Invoicetronic.InvoiceApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.InvoiceApi.Client.Configuration.MergeConfigurations(
                Invoicetronic.InvoiceApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.InvoiceApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReceiveApi(Invoicetronic.InvoiceApi.Client.ISynchronousClient client, Invoicetronic.InvoiceApi.Client.IAsynchronousClient asyncClient, Invoicetronic.InvoiceApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.InvoiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.InvoiceApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.InvoiceApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Receive&gt;</returns>
        public List<Receive> InvoiceV1ReceiveGet(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<List<Receive>> localVarResponse = InvoiceV1ReceiveGetWithHttpInfo(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Receive&gt;</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<List<Receive>> InvoiceV1ReceiveGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Receive>>("/invoice/v1/receive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Receive&gt;</returns>
        public async System.Threading.Tasks.Task<List<Receive>> InvoiceV1ReceiveGetAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<List<Receive>> localVarResponse = await InvoiceV1ReceiveGetWithHttpInfoAsync(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id. (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">VAT number or fiscal code. (optional)</param>
        /// <param name="prestatore">VAT number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Receive&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<List<Receive>>> InvoiceV1ReceiveGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), string committente = default(string), string prestatore = default(string), string fileName = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), DateTime? documentDateFrom = default(DateTime?), DateTime? documentDateTo = default(DateTime?), string documentNumber = default(string), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Receive>>("/invoice/v1/receive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receive</returns>
        public Receive InvoiceV1ReceiveIdDelete(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> localVarResponse = InvoiceV1ReceiveIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receive</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> InvoiceV1ReceiveIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Receive>("/invoice/v1/receive/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        public async System.Threading.Tasks.Task<Receive> InvoiceV1ReceiveIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> localVarResponse = await InvoiceV1ReceiveIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Receive>> InvoiceV1ReceiveIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Receive>("/invoice/v1/receive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receive</returns>
        public Receive InvoiceV1ReceiveIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> localVarResponse = InvoiceV1ReceiveIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receive</returns>
        public Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> InvoiceV1ReceiveIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Receive>("/invoice/v1/receive/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        public async System.Threading.Tasks.Task<Receive> InvoiceV1ReceiveIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.InvoiceApi.Client.ApiResponse<Receive> localVarResponse = await InvoiceV1ReceiveIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies.
        /// </summary>
        /// <exception cref="Invoicetronic.InvoiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.InvoiceApi.Client.ApiResponse<Receive>> InvoiceV1ReceiveIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.InvoiceApi.Client.RequestOptions localVarRequestOptions = new Invoicetronic.InvoiceApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.InvoiceApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.InvoiceApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReceiveApi.InvoiceV1ReceiveIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.InvoiceApi.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Receive>("/invoice/v1/receive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1ReceiveIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
